name: Build

on:
  # push:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * 1

jobs:
  build-github-hosted:
    strategy:
      matrix:
        include:
          - name: sdl2
            repository: libsdl-org/SDL
            ref: SDL2
    runs-on: ubuntu-latest
    container:
      image: mstorsjo/llvm-mingw:20241001
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          path: ${{ matrix.name }}
          ref: ${{ matrix.ref }}
      - name: build
        run: bash scripts/build-${{ matrix.name }}.sh ${{ github.workspace }}/local
        shell: bash
      - name: archive
        uses: ./.github/actions/archive
        with:
          base-path: ${{ github.workspace }}
          source-path: local
          output-path: ${{ matrix.name }}-aarch64-w64.tar.gz
      - name: upload-archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}-aarch64-w64.tar.gz
  build-external:
    strategy:
      matrix:
        name: 
          - x264
          - x265
    runs-on: ubuntu-latest
    container:
      image: mstorsjo/llvm-mingw:20241001
    steps:  
      - uses: actions/checkout@v4
      - name: build 
        run: bash scripts/build-${{ matrix.name }}.sh ${{ github.workspace }}/local
        shell: bash
      - name: archive
        uses: ./.github/actions/archive
        with:
          base-path: ${{ github.workspace }}
          source-path: local
          output-path: ${{ matrix.name }}-aarch64-w64.tar.gz
      - name: upload-archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}-aarch64-w64.tar.gz
  build-ffmpeg:
    runs-on: ubuntu-latest
    needs:
      - build-github-hosted
      - build-external
    container:
      image: mstorsjo/llvm-mingw:20241001
    steps:
      - uses: actions/checkout@v4
      - name: get sdl2
        uses: actions/download-artifact@v4
        with:
          name: sdl2
      - name: get x264
        uses: actions/download-artifact@v4
        with:
          name: x264
      - name: get x265
        uses: actions/download-artifact@v4
        with:
          name: x265
      - name: extract achives
        run: |
          mkdir -p ${{ github.workspace }}
          tar xvzf sdl2-aarch64-w64.tar.gz -C ${{ github.workspace }}
          tar xvzf x264-aarch64-w64.tar.gz -C ${{ github.workspace }}
          tar xvzf x265-aarch64-w64.tar.gz -C ${{ github.workspace }}
      - uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          path: ffmpeg
      - name: build ffmpeg
        run: |
          # do not work check : https://trac.ffmpeg.org/wiki/HWAccelIntro#DXVA2
          # might need more than that
          # curl https://download.videolan.org/pub/contrib/dxva2api.h -o /opt/llvm-mingw/aarch64-w64-mingw32/include/dxva2api.h
          
          cd ffmpeg
          export PKG_CONFIG_LIBDIR=${{ github.workspace }}/local/lib/pkgconfig
          ./configure --pkg-config=/usr/bin/x86_64-pc-linux-gnu-pkg-config --pkgconfigdir=${{ github.workspace }}/local/lib/pkgconfig --cross-prefix=aarch64-w64-mingw32- --arch=arm64 --target-os=mingw32 --enable-sdl --disable-doc --prefix=${{ github.workspace }}/local --disable-static --enable-shared --enable-libx264 --enable-libx265 --enable-gpl --enable-nonfree
          
          make -j16
          make install
      - name: archive
        run: |
          mkdir output
          readlink -f output
          cp ${{ github.workspace }}/local/bin/*.exe ${{ github.workspace }}/local/bin/*.dll output
          # tar cfz all.tar.gz ${{ github.workspace }}/local/bin
          cd output
          zip -r -D ../ffmpeg-wos-arm64.zip .
      - uses: IsaacShelton/update-existing-release@v1.3.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ffmpeg-wos-arm64.zip
  cleanup:
    runs-on: ubuntu-latest
    needs:
      - build-ffmpeg
    steps:
      - name: list
        id: list_artifacts
        uses: MichaelMelena/list-artifacts@v1
      - name: cleanup
        uses: MichaelMelena/remove-artifacts@v1
        with:
          artifacts: ${{ steps.list_artifacts.outputs.artifacts }}
